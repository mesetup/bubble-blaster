//file:noinspection GroovyUnusedCatchParameter
import org.apache.commons.io.IOUtils

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }

        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            name = "sonatype"
        }

        maven {
            url = "https://maven.atlassian.com/3rdparty/"
        }
    }

    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.8.0'
        classpath "com.google.code.gson:gson:2.8.+"
        classpath "io.freefair.gradle:lombok-plugin:5.3.3.3"
    }
}

/**********
 * Plugins
 */
plugins {
//    id 'extra-java-module-info'
    id "groovy"
    id 'java'
    id 'java-library'
    id "idea"
//    id "io.freefair.lombok"
    id 'maven-publish'
    id "net.octyl.elivi" version "0.1.3"
}

//apply plugin: "io.freefair.lombok"

//apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

apply plugin: "io.freefair.lombok"
apply plugin: 'application'

group 'com.qtech'
version '1.0-indev1'
archivesBaseName = 'bubbles'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + " Version: " + System.getProperty("os.version"))

// Read build number file.
int vers = Integer.parseInt("${version1}")
int release = Integer.parseInt(project.property("versionRelease").toString())
String stage = project.property("versionStage").toString()
int stageRelease = Integer.parseInt(project.property("versionStageRelease").toString())

Integer buildNumber
try {
    FileInputStream fileInputStream = new FileInputStream("buildnumber.txt")
    String buildNrString = new String(IOUtils.toByteArray(fileInputStream))
    fileInputStream.close()
    try {
        buildNumber = Integer.valueOf(buildNrString)
    } catch (NumberFormatException e) {
        buildNumber = 0
    }
} catch (IOException e) {
    buildNumber = 0
}


// Advance build number.
buildNumber++
println("Executing build " + buildNumber)
String newBuild = buildNumber.toString()

// Write new build number.
if (!new File("buildnumber.txt").exists()) {
    new File("buildnumber.txt").createNewFile()
}
FileOutputStream output = new FileOutputStream("buildnumber.txt")
output.write(newBuild.getBytes())
output.flush()
output.close()

version = vers + "." + release + '.' + buildNumber + "-" + stage + stageRelease
group = 'com.qtech.bubbles' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'bubbles'
jar.archiveVersion.set(version as String)

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '16' // Need this here so eclipse task generates correctly.

//GroovyShell shell = new GroovyShell(this.getClass().getClassLoader(), this.binding);
//shell.run(file, arguments);

println("Current version: " + version)
println("Project: " + group + ":" + archivesBaseName)
println("Bulding a Java " + compileJava.targetCompatibility + " project...")

/***************
 * Source sets.
 */
sourceSets {
    /**
     * Main set.
     */
    main {
        /**
         * Main resources set.
         */
        resources {
            srcDirs "src/main/resources"
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

task deleteOldJavadoc(type: Delete) {
    delete fileTree("$projectDir/docs/latest/")
}

task copyJavadoc(type: Copy) {
    from javadoc.outputs
    into "$projectDir/docs/latest/"
    dependsOn deleteOldJavadoc
}

mkdir "$projectDir/docs/"
mkdir "$projectDir/docs/latest"

javadoc.finalizedBy(copyJavadoc)

/***********
 * Manifest
 */
application {
    //noinspection GroovyAccessibility,  GroovyAssignabilityCheck
    mainClass = 'com.ultreon.preloader.PreLoader'
}

/***************
 * Repositories
 */
repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven {
        name "Atlassian"
        url "https://maven.atlassian.com/3rdparty/"
    }
    maven {
        name "ImageJ"
        url "https://maven.imagej.net/content/repositories/public/"
    }
    maven {
        name "Maven Central"
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        name "Local Maven"
        url "file://${local_maven}"
    }
    flatDir {
        name "Project Libraries"
        dirs './libs'
    }
}

/*****************
 * Configurations
 */
configurations {
    // configuration that holds jars to include in the jar
    api {
        canBeResolved true
    }
}

/***************
 * Dependencies
 */
dependencies {
    // Projects
    api project(":preloader")
    api project(":hydro")
    api project(":commons")

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // Misc
    implementation 'org.jetbrains:annotations:22.0.0'

    // Apis
    //noinspection GradlePackageUpdate
    api 'commons-io:commons-io:2.11.0'
    api 'org.apache.commons:commons-lang3:3.12.0'
    api 'org.apache.commons:commons-collections4:4.4'
    api 'org.apache.commons:commons-math3:3.6.1'
    api 'org.apache.commons:commons-text:1.9'
    api 'org.apache.ant:ant:1.10.11'

    //noinspection GradlePackageUpdate
    api 'commons-lang:commons-lang:2.6'

    // Local jars.
    api fileTree(dir: '.\\libs', include: ['*.jar'])

    // Objectweb
    api group: 'org.ow2.asm', name: 'asm-all', version: '5.2'

    // Google
    api group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    api group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'
    api group: 'com.google.code.gson', name: 'gson', version: '2.8.8'

    // Apache
    api group: 'org.apache.logging.log4j', name: 'log4j', version: '2.14.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.14.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.14.1'
    api group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.14.1'
    api group: 'org.apache.xmlgraphics', name: 'batik-svg-dom', version: '1.14'
    api group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.14'
    api group: 'org.apache.xmlgraphics', name: 'batik-all', version: '1.14'
    api group: 'org.apache.xmlgraphics', name: 'batik-util', version: '1.14'
    api group: 'org.apache.xmlgraphics', name: 'batik-swing', version: '1.14'
    api group: 'org.apache.xmlgraphics', name: 'batik-awt-util', version: '1.14'

    // JHLabs
    api group: 'com.jhlabs', name: 'filters', version: '2.0.235-1'

    // SwingLabs
    api group: 'org.swinglabs.swingx', name: 'swingx-all', version: '1.6.5-1'

    // FuseSource
    api group: 'org.fusesource.jansi', name: 'jansi', version: '2.3.4'

    // OpenJFX
    api 'org.openjfx:javafx-swing:17.0.0.1'
    api 'org.openjfx:javafx-media:17.0.0.1'
    api 'org.openjfx:javafx-controls:17.0.0.1'
    api 'org.openjfx:javafx-graphics:17.0.0.1'
    api 'org.openjfx:javafx:17.0.0.1'

    // OpenJFX Natives
    api 'org.openjfx:javafx-swing:17.0.0.1:win'
    api 'org.openjfx:javafx-swing:17.0.0.1:mac'
    api 'org.openjfx:javafx-swing:17.0.0.1:linux'
    api 'org.openjfx:javafx-media:17.0.0.1:win'
    api 'org.openjfx:javafx-media:17.0.0.1:mac'
    api 'org.openjfx:javafx-media:17.0.0.1:linux'
    api 'org.openjfx:javafx-controls:17.0.0.1:win'
    api 'org.openjfx:javafx-controls:17.0.0.1:mac'
    api 'org.openjfx:javafx-controls:17.0.0.1:linux'
    api 'org.openjfx:javafx-graphics:17.0.0.1:win'
    api 'org.openjfx:javafx-graphics:17.0.0.1:mac'
    api 'org.openjfx:javafx-graphics:17.0.0.1:linux'
    api 'org.openjfx:javafx-base:17.0.0.1:win'
    api 'org.openjfx:javafx-base:17.0.0.1:mac'
    api 'org.openjfx:javafx-base:17.0.0.1:linux'

    // Studios Hartman
    api group: 'com.github.WilliamAHartman', name: 'Jamepad', version: '1.3.2'

    // MongoDB
    api group: 'org.mongodb', name: 'bson', version: '4.3.2'

    // OSHi (For system info in crash reports)
    api 'com.github.oshi:oshi-core:5.8.2'
}

// task to add addons.json to all relevant folders
task replaceResources(type: Copy) {
    from("src/main/resources/META-INF/addons.json")
    outputs.upToDateWhen {
        false
    }

    filter { line -> line.replaceAll('\\\$\\\$ADDON_VERSION\\\$\\\$', version.toString()) }
    into new File(processResources.destinationDir, "META-INF")
}

processResources {
    exclude 'META-INF/addons.json'
    finalizedBy replaceResources
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'QTech Community',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.qtech.preloader.PreLoader',
                'Multi-Release': 'true'
    }
    from {
        (configurations.extraLibs).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }
    zip64 true
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

task runQBubbles(type: JavaExec) {
    description "Run QBubbles"
    main 'com.qtech.preloader.PreLoader'
    classpath sourceSets.main.compileClasspath
    args('gameDir="./run"')
}

test {
    useJUnitPlatform()
}


def prepareRun = tasks.create('prepareRun', {
    Files.createDirectories(Paths.get(projectDir.getAbsolutePath(), "run"))
});

task uploadJars(dependsOn: "build") {

    description = "Uploads JARs"

    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
//        apply plugin: 'maven'
//        uploadArchives {
//            repositories {
//                if (project.hasProperty("local_maven")) {
//                    mavenDeployer {
//                        repository(url: "file://${local_maven}")
//                    }
//                }
//                if (project.hasProperty("sftp_maven")) {
//                    repositories.mavenDeployer {
//                        configuration = configurations.deployerJars
//                        repository(url: "sftp://${sftp_maven}") {
//                            authentication(userName: "${sftp_username}", privateKey: "${sftp_key}")
//                        }
//                    }
//                }
//            }
//        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.incremental = true
}

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
}
